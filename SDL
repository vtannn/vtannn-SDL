#include<iostream>
#include<SDL.h>
#include<SDL_image.h>
#include<SDL_ttf.h>
#include<SDL_mixer.h>
#include "defs.h"
#include "graphics.h"
#include "logic.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include<string>
using namespace std;
void waitUntilKeypressed()
{
    SDL_Event e;
    while(true)
    {
        if(SDL_PollEvent(&e)!=0&&
           (e.type==SDL_KEYDOWN||e.type==SDL_QUIT)) return;
        SDL_Delay(100);
    }
}
bool check_Collision(Mouse mouse)
{
    SDL_Rect bird_rect={mouse.x,mouse.y-36,51,36};
    for(int i=0;i<Pipes.size();i++)
    {
        Pipe pipe=Pipes[i];
        SDL_Rect pipe_bot_rect={pipe.x,170+pipe_gap-pipe.height,62,300+pipe.height};
        SDL_Rect pipe_top_rect={pipe.x,0,62,150-pipe.height};
        if(SDL_HasIntersection(&bird_rect,&pipe_bot_rect)||SDL_HasIntersection(&bird_rect,&pipe_top_rect)) return true;
    }
    return false;
}
void check_pass_Pipe(Mouse mouse)
{
    for(int i=0;i<Pipes.size();i++)
    {
        Pipe &pipe=Pipes[i];
        if(mouse.x>pipe.x+31&&pipe.pass==false)
        {
            score++;
            pipe.pass=true;
            break;
        }
    }
}
int main(int argc,char* args[])
{
    srand(time(NULL));

    Graphics graphics;
    graphics.init();

    SDL_Texture *background=graphics.loadTexture("fbimg/bg.PNG");
    ScrollingBackground bgr;
    bgr.setTexture(background);

    ScrollingBackground ground;
    ground.setTexture(graphics.loadTexture("fbimg/ground.PNG"));

    Mouse mouse;

    Sprite bird;
    bird.clips.push_back(graphics.bird1);
    bird.clips.push_back(graphics.bird2);
    bird.clips.push_back(graphics.bird3);

    pipe=graphics.loadTexture("fbimg/pipe.PNG");
    Uint32 last_pipe=SDL_GetTicks()-pipe_frequency;

    SDL_Color color={255,255,255,0};

    SDL_Event e;
    int x,y;
    while(!quit)
    {
        if(SDL_PollEvent(&e))
        {
            if(e.type==SDL_QUIT) quit=true;
        }
        ///check score
        check_pass_Pipe(mouse);
        //cerr<<score<<endl;
        ///check collision
        if(check_Collision(mouse)) game_over=true;
        if(mouse.y==620) game_over=true;
        ///gravity
        if(flying)
        {
            mouse.speed+=4;
            mouse.speed=min(mouse.speed,20);
            mouse.turnSouth();
            mouse.move();
            mouse.y=min(mouse.y,620);
        }
        ///render
        //background
        SDL_RenderClear(graphics.renderer);
        graphics.renderBackground(bgr,0);
        graphics.renderBackground(ground,620);
        //pipe
        Pipes_draw(graphics);
        //score
        string score_string=to_string(score);
        char *score_text=new char [score_string.size()];
        for(int i=0;i<score_string.size();i++)
            score_text[i]=score_string[i];
        score_text[score_string.size()]='\0';
        graphics.renderText(score_text,SCREEN_WIDTH/2-10*(score_string.size()-1),10,color);
        if(!game_over)
        {
            ///jump
            if(e.type==SDL_KEYDOWN)
            {
                if(!flying) flying=true;
                mouse.speed=-25;
                mouse.check=false;
            }
            else mouse.check=true;
            ///scroll
            bgr.scroll();
            ground.scroll();
            bird.tick();
            ///render
            //bird
            graphics.renderBIRD(mouse.x,mouse.y-36,bird,mouse.speed);
//            SDL_SetRenderDrawColor(graphics.renderer,255,0,0,255);
//            SDL_Rect rect={mouse.x,mouse.y-36,51,36};
//            SDL_RenderDrawRect(graphics.renderer,&rect);
            //pipe
            if(flying)
            {
                Pipes_delete();
                Pipes_update();
                Uint32 time_now=SDL_GetTicks();
                if(time_now-last_pipe>=pipe_frequency)
                {
                    Pipe next_pipe;
                    next_pipe={pipe,SCREEN_WIDTH,0,false};
                    //random
                    int a=-75,b=75;
                    int random=rand()%(b-a+1)+a;
                    next_pipe.height=random;
                    Pipes.push_back(next_pipe);
                    last_pipe=time_now;
                }
            }
        }
        else
        {
            ///render
            graphics.renderBIRD(mouse.x,mouse.y-36,bird,90);
        }
        graphics.presentRenderer();
        SDL_Delay(40);
    }
    SDL_DestroyTexture(graphics.bird1);
    SDL_DestroyTexture(graphics.bird2);
    SDL_DestroyTexture(graphics.bird3);
    SDL_DestroyTexture(background);
    SDL_DestroyTexture(ground.texture);
    SDL_DestroyTexture(bgr.texture);
    SDL_DestroyTexture(pipe);
    //waitUntilKeypressed();
    graphics.QUIT();
}
